#2.1 vanillaJs 와 ReactJS의 차이를 비교해보자

VanillaJS에서는
STEP1 HTML만든다
STEP2html element 찾아 js에 가져오기
STEP3 : event 감지하기
STEP4 JS 변수 데이터 업데이트
STEP5 HTML에 변경점 업데이트
과정을 거친다
단순하면 당연히 문제 없겠지만,
점점 복잡해질수록 handle 지옥에서 벗어나기 힘들다.


ReactJS를 수행하기 위해서는
가장 먼저 React와 React-DOM 라이브러리르 가져와야 한다.

<!DOCTYPE html>
<html>
    <body></body>
    <script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"> </script>
    <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"> </script>
</html>

아래와 같은 방법으로 리액트를 불러온다.
console에서 React를 찍었을 때 출력이 되면 무사히 완성한 것임.

ReactJS의 규칙 중 하나는 HTML을 HTML 페이지에 직접 작성하지 않는다는 점이다.
모두다 js 파일에 react JS로 쓴다.

이번에는 reacjs로 element를 생성하는 매우 귀찮고 복잡한 방법을 시현한다.
어려운 방식을 살펴보면서 ReactJS의 본질을 이해할 수 있다.

React.createElement("",{}, )
1번째 변수 element name(div, span, button 등등...), 
2번째 변수 property(classname id ....),
3번째 변수 안에 들어갈 내용

ReactJS는 application이 아주 interactive하도록 만들어주는 library이고,
ReactJSDOM은  모든 React element들을 html body에 둘 수 있도록 해준다.

요컨데 핵심은
vanilla에서는 HTML을 만들고 -> JS에 가져와서 -> HTML을 수정하는 방식이었지만
ReactJS에서는 모든것이 JS로 시작한 후 html이 되는것 (생성, 수정, 업데이트 등등) 
생성, 수정, 렌더링도 모두 ReactJS에서 이루어지기에 
업데이트 해야하는 HTML을 업데이트 하도록 JS 쪽에서 컨트롤 할 수 있다는 점이 중요

#2.3


React.createElement("",{}, )의 두번째 변수에
classname id와 같은 property가 들어가기도 하지만
eventlistener도 들어갈 수 있다!! onClick: () => {} 함수로.

vanilla JS에서는
    <button id="btn"> Click me</button> <!--STEP1 HTML만든다-->
    const button = document.querySelector("#btn"); //STEP2html element 찾아 js에 가져오기
    function handleClick(){span.innerText = `Total Clicks : ${counter}`; }
    button.addEventListener("click",handleClick)
이렇게 네줄이 필요하던 것이

ReactJS에서는
const btn = React.createElement("button", {onclick: () => console.log("i am clicked")}, "Click Me!");
이 한줄로 해결이 된다!

#2.5 
JSX 
JSX는 JavaScript를 확장한 문법이다
기본적으로 우리가 한 것처럼 React 요소를 만들 수 있게 해주는데
HTML에서 사용하는 문법과 흡사한 문법을 사용해서  

Babel 은 쉬운버전 JSX를 컴퓨터가 이해할 수 있도록 JS(하드모드)로 번역시켜주는 라이브러리

결국 JSX 문법은 사람이 더 쉽게 작성하기 위해 쓰이는 거지
결국 JSX 로 작성한 코드는 babel을 통해 다시 JS 문법 ~ Reactjs 하드모드 문법으로 번역한 다음
ReactJS / ReactJSDOM 으로 렌더링 하는거다.

JSX – 자바스크립트를 확장한 문법
보통의 HTML과 비슷. 그러나 property를 HTML 태그의 속성처럼 적으면 됨
const Title = (
console.log("mouse enter")}>
Hello I'm a span
);
style={{ backgroundColor: "tomato" }} -> 스타일은 {} 2개임
JSX를 브라우저가 온전히 이해하지 못하므로 이해할 수 있게
https://unpkg.com/@babel/standalone/babel.min.js 를 설치해야함
-> JSX로 적은 코드를 브라우저가 이해할 수 있는 형태로 바꿔줌
바벨을 가져온 뒤 script type="text/babel"로 적어줘야 인식함



#2.6 
액션까지 낭낭하게 넣어둔 element를 rendering 하기 위해서 
 ReactJS 하드모드에서는 
 const container = React.createElement("div", null, [h3, btn]);
 를 썼다.

 const container = <div> h3 btn </div>
 그냥 이렇게만 하면 "h3 btn" 이라는 글자만 출력될 뿐이다.

 그냥 텍스트가 아니라 요인을 집어넣고 싶으면
 요인이 그냥 Object가 아닌
    const h3 = (
      <h3 id="h3" onMouseEnter={() => console.log("mouse Entered")}>
        Hello, i am a h3
      </h3>
    );

함수형으로 정의해야 한다.
arrowfunction으로 아래처럼 하던가
    const h3 = () => (
      <h3 id="h3" onMouseEnter={() => console.log("mouse Entered")}>
        Hello, i am a h3
      </h3>
    );

그냥 일반 함수 정의로 아래처럼 해야한다.
    function h3() {
            return(
        <h3 id="h3" onMouseEnter={() => console.log("mouse Entered")}>
            Hello, i am a h3
        </h3>
        );
    }

element들을 함수화 했다면, 
 const container = <div> H3 Btn </div>
 를
 const Contianer = <div> <H3 /> <Btn /> </div>
로 작성한다.

※ 주의점 
JSX에서 함수형으로 정의된 element는 첫글자 대문자로 정의내려라
그렇지 않으면, <Button /> 이 아닌 <button /> 로 작성하면
우리가 정의내린 element인지, 아니면 html 기본 element를 가져다 쓴건지 구별을 못한다.

#3.0

state = 바뀌는 데이터를 저장하는 곳

vanillaJS에서 한번 클릭할 때마다 카운트가 올라가는 기능 ~ state로 구현한다.

※변수를 JSX에 전달하는 방법

JS에서는 .innerText = ~~~ 를 써서 \
span.innerText = `Total Clicks : ${counter}` 
와 같은 방식으로 반영했다면,

JSX에서는  <element > ~~~~ {변수} </element>  element 사이에 입력하고 싶은 변수를 중괄호에 감싸줌으로써

let counter = 0;

<div>
    <h3> Total Click : {counter} </h3>
    <button> Click Me!</button>
</div>
와 가은 방식으로 반영한다.

※ 중요한 사실은, 아무리 eventlistner를 element에 달아두고, 변수가 함수에 의해 변화하더라도
바뀐 값들이 제때 제때 리렌더링 되지 않으면, 화면에서는 그 변화가 반영되지 않는다.
즉, 액션을 취할때마다 렌더링 과정을 거쳐준다.


React의 강점은 현재 시점에서 vanilla와 Reactjs 결과값을 실행했을 때
countup 버튼을 클릭할 때마다 Devtool에서 값을 업데이트하는 범위를 보면서 알 수있다.

vanilla는 연관되어 있는 모든 element를 다 업데이트 하는 반면에
reactjs는 변환하는 counter 변수 값 하나만 업데이트 되는 것을 확인할 수 있다.
button / title/ h3 등 변화하지 않는것을 모두 새로고침할 필요 없이 바뀐 부분만 업데이트 해주는 것은
엄청난 양의 연산 낭비를 막아준다.

1. element에 변수를 넣고 싶으면 {변수} 만 추가하면 끝.
2. 바뀐 값에 따라 ui를 업데이트 하고 싶으면 ReactDOM.render() 함수를 사용하면 된다
3. ReactDOM.render() 로 업데이트 하더라도, 전체를 새로 다 불러오는 것이 아닌, 바뀐 부분만 찾아서 업데이트 해준다.

BUT... 매번 함수로 변수 값이 바뀔때마다 ReactDOM.render() 함수를 추가하는 것은 비효율이다.


const data = React.useState( defaultValue ); 
로 정의한 data를 열어보면
[defaultValue, f] 를 가진 array임을 알 수 있다.
앞부분은 우리가 다룰 데이터가 들어가고
뒷부부은 관련된 함수로 구성되어 있음

즉 
const data = React.useState( defaultValue ) 꼴은
와

let counter = 0;
function counterUp(){
    //code
}
는 같은 의미를 가진다.

※ array 속에 있는 것들을 불러오는 방법
1) 기존의 방법
const food = ["tomato", "potato"]
const favFood = food[0];
const terFood = food[1];

2) 더 깔끔한 방법
const food = ["tomato", "potato"]
const [favFood, terFood] = food;

3) 더더 깔끔한 방법 
const [favFood, terFood] = ["tomato", "potato"]

#3.2 

왜 react.useState 속 modifier가 필요할까?
 3.0에서 겪었듯이, 함수로 아무리 value를 변화해도
 함수 끝마다 ReactDOM.render() 해주지 않으면 화면에 변화가 반영되지 않는다. ~ 매번 같은 코드를 반복하는건 비효율!

 modifier는 어떤 값을 부여하던 그 갚으로 업데이트 하고 리렌더링을 해준다.

 [state, setState] = React.useState( 기본값);

    const action = () => {
    setState(state + 1);
    }; //setState 에다 원하는 함수 output을 넣으면, 업데이트되고, 리렌더링까지 해준다.

    return (
    <div>
        <h3> Total Click : {state} </h3>
        <button onClick={action}> Click Me!</button>
    </div>
    ); // 화면에 출력할 친구들
}
ReactDOM.render(<App />, root);

구조를 가지면 된다.

modifier 함수로 state가 바뀔때, 
해당하는 app() 함수 코드 전체가 가동되고
return 안에 있는 컴포넌트 전체도 재생성 된다 (새로 업데이트된 값과 함께)
그 와중에 똑똑하게, 바뀐 부분만 다시 만든다.

React.useState() 배열에서
보통 데이터에는 counter처럼 원하는대로 붙이고
f는 set 뒤에 데이터 이름을 붙임 (setCounter)
어떤값을 부여하던 setCounter 함수는 그 값으로 업데이트하고 리렌더링 일으킴
1. counter라는 데이터를 받음
2. return()에 그 데이터를 담고 있음 (리턴은 사용자가 보게될 컴포넌트)
3. 버튼이 클릭되면 counter값을 바꿔줄 함수 호출 -> setCounter
4. counter의 새로운 값을 가지고 counter 함수를 호출
5. 그 새로운 값은 setCounter(counter + 1)에 써준 counter + 1


#3.4

const [x, setX] = React.useState();
에서 
setX( x ~~~~) ; 이런 식은 권장하지 않는다.
왜냐면 x가 다른 곳에서 update 될 수도 있기 때문
어쩌면 x가 다른 곳에서 변경되어서 우리가 생각하는 값이 아닐 수도 있다 ☆☆☆☆
단순한 구조에서는 이러한 오류를 시현하기 어렵지만


state를 세팅하는 데는 2가지 방법이 있다.
방법1) 직접 할당 :setState(state +1)
    setX( 15 ) setX를 이용해서 우리가 원하는 값(숫자 / 문자 등등)을 넣어주는 것.
방법2)함수를 할당:setState(state => state +1) (함수의 첫번째 인자는 현재 state 이다)
    setX( x ~) 이전 값을 이용해서 현재 값을 계산해내는 방법

현재 state랑 관련이 없는 값을 새로운 state로 하고싶은 경우에는 (방법1),
현재 state에 조금의 변화를 주어서 새로운 state를 주고 싶은 경우에는 (방법2)


setCounter(counter + 1);
함수의 꼴로 넣어주는게 더 적합하다
여기서 함수형으로 만들어두면, 변수는 무조건 최근에 업데이트된 변수(본 예시에서는 counter)를 넣어준다.
setCounter((current) => current + 1); // 이 방식이 더올바른 방식이다. 
setCounter 안에 정의된 함수에서 인자는 무조건 counter이다. ★★★★

???왜 setState에 current라고 넣어줘도 작동하는건가요?
setState는 함수이고, 인자값으로 객체를 넣어주면 알아서 현재 state값을 찾아 매핑되는건가요?

맞습니다. setState의 인자값이 객체인지 함수인지 판별하는 부분이 있습니다. \
함수일 경우 저장되어 있는 값(객체)을 인자로하여 리턴한 값을 최종적으로 업데이트 합니다. 
확인하시고 싶으시면 react-dom.development.js 15228 번째 라인입니다.(v17.0.2)


setCounter()에 값으로 넣을지 함수로 넣어줄지가 헷갈리신다면,
onClick 함수안에 여러번 넣어서 테스트해보시면 이해가 빠를 것 같습니다.

1. 값으로 여러번
function onClick() {
setCounter(counter + 1);
setCounter(counter + 1);
setCounter(counter + 1);
setCounter(counter + 1);
setCounter(counter + 1);
}
2. 함수로 여러번
function onClick() {
setCounter(current => current+ 1);
setCounter(current => current+ 1);
setCounter(current => current+ 1);
setCounter(current => current+ 1);
setCounter(current => current+ 1);
}
1번으로 돌렸을 경우에는 setCounter를 몇번을 호출해도 한 번만 실행되는 걸 보실 수 있고(counter가 1만 증가)
2번으로 돌렸을 경우에는 setCounter가 호출된 만큼 counter가 증가된 걸 볼 수 있습니다.

한 번 연습해보시고 니코쌤 설명을 들으면 이해가 더 될거라 생각합니다.


setCounter((firstargument)=> firstargument +1));
firstargument에 자동으로 현재 state값을 호출해서
return을 그값에다가 +1해준것입니다.
fistargument는 단순한 변수명이고, ( ) 안에 ,로 구분된 몇번째 인자에
어떤 특성값이 자동으로 할당된다라는 설명이 동영상내에 있으니
참조하시면 될 것 같습니다.

#3.5 
unit convert application 시간-분 원-달러

<label> = input 옆에 써주는 글씨 ~ 누군가 이글씨를 누르면 그 옆 input이선택됨
<label for = {연결할 id}
<label htmlFor = {연결할 id}

react, reactdom을 import하는 script tag에서
  <script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script>
production - > development 로 변경하는데
  <script src="https://unpkg.com/react@17.0.2/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.development.js"></script>
production은 배포 모드, development는 개발 모드를 의미합니다.
개발모드는 니코쌤이 보여준 것 처럼 버그로 이어질 수 있는 요소들을 미리 경고하는 검증 코드가 포함되어 있습니다.

하.지.만 JSX는 html과 다르다.
html에서는 for, class 같은 단어가 문제가 없지만
JS. JSX 와 같은데서는 혼란을 줄 여지가 매우 크다.

class 대신 className을 쓰며
for 대신 htmlFor 를 써야 한다.


※react 세상에선 
우리가 직접 입력하는 값들을 uncontrolled value 라고 부른다.

글자를 쓸 때마다 input 속에 들어가 있는 값들을 minutes 에 반영하고 싶을때






#3.6

input 과 value를 이어주면
value의 값을 input에도 반영되고
input값을 외부에서도 수정이 가능하게 된다

Value 안에는 
value = {minutes}
state만 정갈하게 들어가는 것 뿐만 아니라

value={Math.round(minutes/60)}
처럼 입맛대로 변형해서 넣을 수도 있다.

minutes -> hours 의 경우에는
minutes를 넣는 input 엘레먼트 안에 onChange={onChange} 와 같이
이벤트 리더가 있고 
이벤트 리더 안에 setMinutes(event.target.value); 로 업데이트/리렌더링도 구현되어 있지만

hours -> minutes 의 경우에는
어떠한 이벤트 리더도, state, setState 함수도 정의된 바가 없다.


Q1
마지막 리셋버튼의 핸들러 함수의 표기법이 의아해서 질문합니다.
const reset = () => setMinutes(0); 이렇게 작성해 주셨는데, 이렇게 해도 되는거 보니 함수 표기법상 가능한 거겠죠? 화살표 함수는 알고 있는데 {}가 나올 바디 부분에 modifier함수가 있으니 매우 생소합니다.
고수님들의 설명 한번 부탁드립니다.

A1
arrow 쓸 때 한 줄로만 나타낼 수 있으면 {} 생략할 수 있습니다.
앞 선 강의에서도 나왔겠지만 함수 내용이 여러 줄일 경우 {}로 묶어주고
리턴되는 내용은 ()로 묶어서 나타낼 수 있습니다.


#3.7

fliped 변수 = boolean이다.

id = "hours"인 <input> 은 disabled = {true}가 기본값이다.
즉, fliped가 false 일때 disabled = true가 되어야 한다.
true = {fliped === false} 면 해결




flip
const onFlip = () => setFlipped(!flipped);
-> flipped가 true라면 부정명제인 !flipped는 false
-> false라면 true

state값으로 input을 enabled할지 disabled 할지를 결정할 수 있음

디폴트 값이 false 라고 정했으므로 Hours는 disabled 되어야함
그래서 disabled={flipped === false}를 써줘서
flipped가 false라면, disabled는 true가 되도록 만들어줌
Minuets에는 반대로
disabled={flipped === true}라고 써줌
그러나
Hours는
disabled={!flipped}
Minuets에는 반대로
disabled={flipped}
주는게 더 짧고 좋음

시간 -> 분 컨버터
삼항연산자(ternary operator) 사용하기
flipped ? amount : amount / 60
-> 만약 flipped 상태면 state에 있는 값을 그대로 보여주기
아니라면 60으로 나눈 변환된 값 보여주기
value={flipped ? amount * 60 : amount}
-> 만약 flipped 상태면 60으로 곱한 변환된 값 보여주기
아니라면 state에 있는 값을 그대로 보여주기

flip누르면 변화된 값 그대로 가져오므로
onFlip 변수에 reset(); 넣어주기


문제는~~ 내가 hours input에 뭐라고 써넣든
value는 항상 math.round(minutes/60) 을 따라갈 것이다.
이것은 우리가 원하는 방향이 아니다
내강 원하는 건 변환없이 내가 쓴 value를 그대로 보여주고 싶은 것이다.

math.round(minutes/60)의 변환 공식의 적용은
내가 minutes input에 썼을 때만 일어나야만 한다.

여기에 이미 우리는 
변환공식{math.round(minutes/60)}과
스위치 조건 (fliped)를
모두 가지고 있다

여기서 우리는 삼항연산자(ternary operator)로 바꿔주겠다
인라인 if문이라고 보면 된다
{조건문 ? 참일경우 : 거짓일경우}
로 구성된다.

헷갈리니까 minute, setMinutes는 
amount, setAmount로 변형하자.

#3.9

<select> 컴포넌트

<select>
    <option> Min & Hours </option> 
    <option> KM & Miles </option> 
</select>



중괄호 {}를 쓰면 js 스크립트를 넣을 수 있다!

속성으로 value 를 가질 수 있으면 onChange 속성을 붙일 수 있다.
SELECT, OPTION에도 붙힐 수 있다 (드롭다운) 11:12 참고하자

useState의 두번째 인자인 modifier함수를 실행하면 해당 컴포넌트가 리렌더링 된다.

[리렌더링 조건]
1) props이 바뀔때
2) state가 바뀔때
3) 부모 컴포넌트가 리렌더링 될 때


#4.0 props이
props는 일종의 방식
부모 컴포넌트로부터 자식컴포넌트에게 데이터를 보낼 수 있게 해주는 방법

생성한 예시에서
부모 컴포넌트는 <App />
자식 컴포넌트는 <MinutesToHours /> <KmToMiles />

App은 자식보다 훨씬 작을 뿐만 아니라
자식들은 부모컴포넌트의 데이터를 필요로 하지 않는다. (독립적일 수 있다.)

컴포넌트 ~ 단지 JSX를 반환하는 함수에 불과하다.
변경사항버튼, 취소버튼, 로그인버튼, 확인버튼 등
대부분 하나의 앱에는 모든 버튼이 통일된 모습을 가지고 있다.
우리가 만일 리액트 컴포넌트를 재활용할 방법을 모른다면
매 버튼마다 똑같은 코드를 여러번 작성해야한다.

만일 아래처럼 매번 대동소이한 컴포넌트를 만들지 말고
<div>
<saveBtn />
<confirmBtn />
</div>

공통 컴포넌트를 만든 뒤에, 원하는 부분만 수정할 순 없을까?
<div>
<Btn banana = "Save Changes" />
<Btn banana = "confirm"/>
</div>

<Btn banana = "Save Changes" />
는 
Btn({banana:"save Changes"}) 
와 똑같다.

ReactJS는 자동으로 네가 이곳에 넣은 모든 property(prop)들을 모조리 이 오브젝트 안에 집어넣는다.
오브젝트는 컴포넌트 함수의 첫번째 인자로 주어진다.


function Btn(props){
    return(
        <div> {props.banana}</div>
    )
}

props는 오브젝트기 때문에 우리는 {} 중괄호를 열어서 오브젝트로부터 banana를 받을 수 있다.

????????????????????????????????????????????????????
function Btn({banana}){
    return(
        <div> {banana}</div>
    )
}


///style 안에 있는 property 에서 삼항연산자 작성할 때 중괄호/괄호 작업 안해줘도 된다.
그냥 

    function Btn({banana, big}) {
        console.log(banana, big)
        return(
            <button
            style = {{
                backgroundColor : "tomato",
                color : "white",
                padding : "10px, 20px" ,
                border : 0 ,
                borderRadious : 10,
                fontSize : big ? 18 : 16,  ///삼항연산자 중괄호 없어도 돌아감
            }}
            >{banana}
            </button>
        );
    }

    function App() {
      return (
        <div>
            <Btn banana = "Save Button" big = {true} />
            <Btn banana = "confirm Button"/>
        </div>
      );
    }


#4.1 
부모 컴포넌트가 state를 변경할 때 어떤 일이 일어나나?
다른 컴포넌트 / 자식 컴포넌트에게 어떤 일이 일어나나?



    function App() {
        const [value, setValue] = React.useState("Save Changes")
        const changeValue = () => {
             setValue("Revert Changes")
        }
      return (
        <div>
            <Btn text = {value} onClick={changeValue} big = {true} />  /////
            <Btn text = "confirm Button" big = {false}/>
        </div>
      );
    }

    와 같은 꼴일 때 onClick={changeValue}는 eventListener가 아니라(?!?!) 아들 컴포넌트인 Btn으로 들어가는 prop이다.!

    ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
    ※ 내가 Btn 엘레멘트 함수 속
    <button
        onClick = {~~~}
        >
    처럼 HTML element 안에 onClick을 넣는다면 이벤트 리스너이지만,

    하지만 나의 커스텀 컴포넌트에다가
    <Btn text={value} onClickP={changeValue} /> 
    처럼 넣는다면, 이것은 이벤트 리스너가 아니라
    onClickP이라는 (=banana여도 전혀 상관 없음) prop의 key 중 하나에 불과하다.

    <Btn style={{color : "green"}} text={value}  /> 
    이라고 백날 쳐봐도 Btn 컴포넌트의 색깔이 자동으로 초록색으로 변하는건 아무것도 없다.
    
    즉 onClickP이라는 키값을 가지는 prop을 가져와서
    const Btn ({text, onClickP}){ //이라고 직접 prop을 가져오고
        onClick={onClickP} // 형태로 직접 넣어야 한다.  
    }
    //아, 그리고 prop 입력 대상이 숫자, 문자 뿐만 아니라 함수도 가능하다 위의 예시가 그거다.
    ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆


    버튼을 클릭하면
    btn 컴포넌트 속 
    onClick={onClickProp} 이 불려와짐
    onClickProp 은 App() 컴포넌트 속
    <Btn text={value} onClickProp={changeValue} />
    changeValue를 호출함
    changeValue라는 함수 속에서 
    setValue로 인해 value가 업데이트 됨과 동시에 render를 다시 수행한다
    render를 다시 수행하면 return() 속에 있는 모든 엘레멘트들이 다시 돌면서 렌더링이 일어난다.
    

    ※근데.....
    App() 속에 두개의 <Btn /> <Btn /> 이 있고
    그중에 하나만 바뀌는데
    Btn 둘다 리렌더링 되어버린다.

    부모가 state를 변경하고 있고 변경함과 함께 모든게 다시 그려진다 
    React Memo 라고 불리는 걸 할 수 있다.
    우리는 props가 변경되지 않는 특정 컴포넌트는 굳이 다시 그려지는걸 원하지 않는다고

    우리는 이 컴포넌트를 다시 그릴지 말지를 결정할 수 있다.

    많이 쓰지는 않지만/ 리액트에는 React.memo()라는 특성이 있음을 알고는 있어라.

    커스텀 컴포넌트에 
    function Btn({text, big, onClickProp}) {~~~~~}
    
    아래와 같이 React.memo() 함수를 거쳐가게 한 후
    const MemorizedBtn = React.memo(Btn)

    <Btn /> 을     <MemorizedBtn /> 으로 전환해놓으면
    전환된 컴포넌트는 변화할때마다 항상 리렌더링 되지 않고
    "컴포넌트와 연관된 변화가 있을 때에만" 리렌더링을 수행한다.


정리 1) 
1. props에 function도 보낼 수 있음
이것은 JSX로 html 태그 자체에 이벤트 리스너를 넣는것과는 전혀 다른 것임.
그저 이벤트를 실행시키는 함수가 프로퍼티로 들어간 것임.
prop은 그냥 부모에서 자식으로 데이터를 넘길 때 사용하는 argument의 역할이니까!

2. (07:41~) 부모의 상태를 바꾸는 함수를 만들었고, 부모 컴포넌트에서 그 함수를 prop으로 보내면 자식 컴포넌트에서 그 함수가 실행된다.

3. 불필요한 re-render는 React.memo()로 관리할 수 있음
부모 컴포넌트의 state를 변경하면 당연히 그 자식 컴포넌트들도 Re-render가 일어남. 불필요한 렌더링이 발생할 수도 있는데, 이 경우에는 React.memo()로 prop의 변경이 일어난 부분만 렌더링 시킬 수 있음. 아주 많은 자식 컴포넌트를 가지고 있는 부모 컴포넌트일 때 사용하면 될듯.

* React.memo()
컴포넌트가 React.memo()로 wrapping 될 때, React는 컴포넌트를 렌더링하고 결과를 메모이징(Memoizing)한다. 그리고 다음 렌더링이 일어날 때 props가 같다면, React는 메모이징(Memoizing)된 내용을 재사용한다.


React.memo는 고차 컴포넌트(Higher Order Component)입니다.
컴포넌트가 동일한 props로 동일한 결과를 렌더링해낸다면, React.memo를 호출하고 결과를 메모이징(Memoizing)하도록 래핑하여 경우에 따라 성능 향상을 누릴 수 있습니다. 즉, React는 컴포넌트를 렌더링하지 않고 마지막으로 렌더링된 결과를 재사용합니다.
```
const MyComponent = React.memo(function MyComponent(props) {
/* props를 사용하여 렌더링 */
});
```
https://ko.reactjs.org/docs/react-api.html#reactmemo

정리 2)
[헷갈릴 수 있는 부분]
Btn onClick={changeValue} /> 이것은 이벤트 리스너를 붙인 것이 아닌, 컴포넌트에 onClick이라는 프롭을 전달한 것이다. 여기서 onClick은 단순히 props의 이름이다. (2:07)

결국 컴포넌트에 onClick 이벤트리스너를 붙이고 싶다면 해당 컴포넌트의 props으로 이벤트 리스너를 보내고, 그걸 받아오면 해당 컴포넌트의 최상단 엘리먼트에 onClick 이벤트 리스너를 붙이면 된다 (3:46)

즉, 컴포넌트에는 HTML Element처럼 속성을 지정해줄 수 없다.
컴포넌트에 그러한 행위를 하는것은 그저 props를 전달해 주는 것 뿐이다.

리액트의 렌더링방식 (6:18)

불필요한 리렌더링을 MEMO로 막기 (8:40)

#4.2 
사실 1) Props Type

<script src="https://unpkg.com/prop-types@15.7.2/prop-types.js"></script>
를 추가하면

Btn.propTypes = {
    text : propTypes.string.isRequired,
    fontSize : propTypes.number, 
}
와 같은 방식으로 prop의 타입을 제한할 수 있다.

사실 2) 커스텀 컴포넌트의 기본값
 function Btn({text, big = true, fontSize=14 }) {}

 와 같이 컴포넌트 안의 prop 값 = XXX 를 넣으면
 만일 컴포넌트를 불러올때 prop이 누락되어있다면 기본값인 XXX를 가져와 씁니다.

수강생 노트 1)
https://unpkg.com/prop-types@15.7.2/prop-types.js
그리고 propType이 적용 안되시는 분들은
https://unpkg.com/react@17.0.2/umd/react.production.min.js ->
https://unpkg.com/react@17.0.2/umd/react.development.js 로 변경해주세요.

수강생 노트 2) 
이전강의 memo와 같이사용 하면 반응하지않습니다.
MemorizedBtn 지우고 Btn 으로 이름바꿔서 다시 링크해야합니다
/ MemorizedBtn = React.memo(Btn) 아래쪽으로 MemorizedBtn.propTypes ={
사용하셔도 됩니다.


#5.0
create-react-app
Node js 설치하기
터미널에서 node -v로 설치 확인
npx install

src 폴더는 모든 파일을 넣을 장소
index.js가 가장 익숙한 것

무사히 설치되면 npm start 터미널에 입력하면 자동으로 웹페이지가 뜬다.
참조 : package.json 을 열어보면 npm start / build / test /eject 사용에 대한 내용이 담겨있다.

create-react-app의 장점중 한가지
auto-reload이다. 몇가지를 바꾸고 저장하면


Q1 could not determine excutable to run 에러
https://velog.io/@gonkang_jeondosa/TS-React-CRA%EC%84%A4%EC%B9%98%EC%A4%91-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%97%90%EB%9F%ACnpm-ERR-could-not-determine-executable-to-run
 
npx create-react-app 경로명

수강생 노트1)
node.js를 설치할 수 없는 환경인 분들은 https://ide.goorm.io/ 또는 https://codesandbox.io/에서 수강하시는게 편할거 같습니다! 시간 나면 사용법도 정리해서 올려볼게요. 그리고 써보면서 불편한 점 생기면 다른 IDE도 알아볼게요!

수강생 노트2)
npx 치자마자 로그를 확인하라고 떠서 .. 아래 주소보고 따라했습니다.
https://stackoverflow.com/questions/53657920/i-cant-install-react-using-npx-create-react-app
npm 버전에 따라 조금 다른거 같은데 참고하면 좋을것 같아요

수강생 노트3)
NodeJS를 LTS버전으로 설치하면 다음과 같은 오류 메세지가 발생합니다

A template was not provided. This is likely because you're using an outdated version of create-react-app.
Please note that global installs of create-react-app are no longer supported.
You can fix this by running npm uninstall -g create-react-app or yarn global remove create-react-app before using create-react-app again.

그러나 최신 버전으로 설치 후 명령어 입력하니 정상적으로 실행되는 것 확인하였습니다

수강생 노트4) 
command not found: code 뜨시는 분들은 이렇게 해보세요

1. 비주얼 스튜디오를 킨다
2. command + P를 누른다.
3. >shell command: Install 'code' command in PATH** command.를 선택해서 설치를 진행한다.


수강생 노트5)
React 프로젝트 초기화 (Create React App)

빌드 구성 없이 React 앱을 만듭니다.
npx create-react-app my-app

You are running `create-react-app` 4.0.3, which is behind the latest release (5.0.0). 오류 뜨시는 분들은
npx create-react-app@5.0.0 my-app으로 진행하시면 됩니다.

https://github.com/facebook/create-react-app

수강생 노트6)
[[[[[[ 방금 React-app 설치하신 분들 필독!!!! ]]]]]]

React-app이 업데이트 되면서 영상 속 내용과 차이점이 생겼습니다.
ReactDOM.render 구문이 폐기되고 ReactDOM.createRoot 구문으로 대체되었어요.
제가 방금 설치하고 니꼬샘 따라 필요없는 부분 지운 index.js 코드는 아래와 같아요.
차후 강의 내용 따라갈 때 문제가 생길지는 모르겠지만 일단 공유해드려요

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
★React.StrictMode★
★App /★
★/React.StrictMode★
);

댓글에 꺽쇠괄호 입력하면 출력이 안되서 ★로 치환했습니다. 참고해주세요.

※ node.js에서 수행하기 때문에 파일을 각각 분리하는게 가능하고 좀더 조직적으로 구성할 수 있다.
※ test code도 기초에서는 필요 없기 때문에 제거

#5.1 
CRA
별개의 XX.js 파일에 정의내려놓은 컴포넌트 함수를 다른데 (App.js)에서도 사용할 수 있게 하고 싶으면
export default Button;
을 입력해 외부 참조 가능하게 함.


Proptype 주의점

Button.propTypes = { // 이 때는 소문자 propTypes고,
    text: PropTypes.string.isRequired, // 이 때는 대문자 PropTypes 입니다.
};


여태까지 style은 style.css 에서 컴포넌트마다 globally 스타일을 적용했지만
global 한 css style을 원하지 않는다면
한 어플리케이션을 위한 엄청나게 많은 css가 단 한 파일에 있는것은 좋지 못함
그렇다고 커스텀 컴포넌트를 정의하는 XXx.js 파일 안에 스타일을 넣는 것도 좋지 못함
divide and conquer 를 원하는 입장에서는
"커스텀 컴포넌트를 위한" 별개의 스타일css 파일을 따로 두면 베스트.

이전에는 style.css에서 모든 css를 globally 정의하고 index.js에서 import 했다면
이제는 button.css 에서 button 커스텀 컴포넌트의 css를 정의하고 button.js 에서 import한다.

############ Button.module.css ###################
.Btn {
    background-color: tomato;
}
##################################################
 
create-react-App은 css 코드를 js 오브젝트로 변환시킨다.
변환된 js 오브젝트는 Btn 을 안에 가지고 있다.
렌더링으로 최종 결과물을 받아보면, 생성된 HTML 오브젝트는 무작위적인 랜덤 클래스를 갖는다.

############# Button.js ###########################
import styles from "./Button.module.css"

function Button({text}){
    return(
        <button className={styles.Btn}>
        {text}
        </button>
    )
}

##################################################


수강생 노트1)
- 1 컴포넌트 당 1개의 .js 파일을 가질 수 있어서 모듈화가 가능하다.
- 컴포넌트별 스타일은 .module.css 파일을 생성 + import 하여 사용
=> 여기서 스타일은 className이나 id로 import한 스타일 객체의
property를 전달하여 적용된다는 것! 이는 기존의 "어떤 class나 id에 적용할 스타일"이 아닌 "특정 jsx element에 적용할 스타일"로 생각할 수 있다~ react 컴파일 과정 중 random class나 id가 생성되기 때문에 .css 파일의 class, id 이름을 굳이 외울 필요없다
- create-react-app을 사용하면 React 앱 스캐폴딩을 생성해준다~

수강생 노트2)
prop-types 설치 시 npm audit fix 라는 명령어가 눈에 띌 수 있다.
npm v6 이후에 나온 기능이며 이는 모듈의 취약점을 검사해준다.
아무런 고민 없이 그럼 더 좋은거 아냐? 하고 명령어를 치는 순간 잘 동작하던 프로젝트가 정상 동작하지 않을 수 있다. 나처럼 아무 생각없이 터미널에 보이는 내용을 마냥 따라치진 말자.

수강생 노트3)
코코아클론 코스 해보신분들은 아시겠지만, 클래스를 html에 보여줄때 랜덤으로 변환해서 보여주는건 엄청 좋은것 같네요! Super sweet!

수강생 노트4)
1. (08:42)
css 코드를 자바스크립트 객체로 변환시켜줌
import styles from "./~";

styles가 css 코드를 가지고 있는 객체로 넘어옴
따라서 해당 css코드에 작성된 class name(여기서는 btn)을 프로퍼티 접근 연산자(.)를 사용해서 이용가능해짐.

< Button style={styles.btn} / >
위와 같이 작성해서 해당 css 스타일링을 사용할 수 있음.

브라우저를 통해 html 코드를 확인해보면 해당 컴포넌트에 무작위의 class name이 붙음.
요소가 각각의 클래스네임을 가지게 돼서 일일이 class name을 기억해서 스타일링 할 필요가 없음

수강생 노트5)
질문이요!
왜 css 파일명에 'module' 을 붙이나요?
CRA에서 동작을 위한(적용을 위한) 규칙인가요? 아니면 단순 취향인가요?

Q : We need to name it 'module' to activate the CSS Module behaviour.


#6.0
state & Prop
-> Effect!!!!!


CRA에서는 이미 React 환경 속이기에 굳이 
React.useState() 
를 쓸 필요 없이 그냥
useState() 
만 써도 된다.


가끔은, 다시 render 될때마다 반복실행되어도 괜찮은 코드가 있을 수 있다.
하지만 그렇지 않고 component가 처음 render 될 때만 코드가 실행되길 원할수 있다.
첫 render 때만 실행되고, 다른 state 변화에는 실행되지 않도록 하기...

특정 상황에서만 돌아가도록 제한을 주었으면 좋겠다.

useEffect(변수1, 변수2);

변수1 : 네가 한번만 실행하고 싶은 코드
변수2 : [감지하고 싶은 state1, state2, state3....]

수강생 노트1)
useEffect
- 두 개의 argument를 가지는 함수
- 첫 번째 argument는 우리가 딱 한번만 실행하고 싶은 코드
- 두 번째는 [] 배열을 넣어줌
-> useEffect가 컴포넌트의 첫 번째 렌더 시점에 iRunOnlyOnce 함수 호출
그리고 상태를 변화시키면 iRunOnlyOnce는 호출되지 않음
즉, 한번만 렌더링 됨
단순화 하여 useEffect(() => {
console.log("CALL THE API")
},[]); 써도 됨

수강생 노트2)
useEffect(callback, [])
: 대표적인 사용법 => API를 딱 한번만 호출하고 그 뒤로는 다시는 호출하기 싫은 경우

수강생 노트3)
전 console.log("i run all the time") 코드가 state가 변경될 때마다 두번 씩 실행 되는데 이건 이유가 뭘까요?

수강생 노트4)
useMemo vs useEffect 차이

useMemo의 경우 "생성"함수에 관련된 기능입니다. 생성자 함수가 고비용(처리 시간이 오래 걸리는 등)인 경우 렌더링마다 계산하는 것은 처리 시간이 오래 걸리므로 값을 기억해놓고 의존성이 변경되었을 경우에만 다시 계산해주는 기능입니다.
useEffect의 경우는 api 호출, 타이머 등 렌더링 과정에서 니코쌤이 설명해준 것처럼 한 번만 호출해도 될 기능이 렌더링마다 실행되거나, 호출과정에서 렌더링에 영향을 끼칠 수 있는 것을 모아서 따로 처리하기 위한 기능입니다.
둘의 결정적인 차이는 useEffect는 해당 컴포넌트의 렌더링이 완료된 후에 실행되지만, useMemo는 렌더링 중에 실행되는 차이가 있다고 합니다.
자세한 건
https://ko.reactjs.org/docs/hooks-reference.html#useeffect
https://ko.reactjs.org/docs/hooks-reference.html#usememo
여기에서 읽어보시면 도움이 될 것 같네요.

#6.2 Deps

만일 우리가 사이트에 검색창을 만든다 치자
검색을 위한 검색 api가 호출되어야 하는 순간은
검색 버튼을 눌렀을 때에만 작동했으면 좋겠다.
다른 버튼을 누른다고 호출되지 않고
오롯이 키워드가 바뀌었을 때에만 작동했으면 좋겠다면.

  useEffect(()=>{
    console.log("SEARCH FOR", keyword);
  }, [keyword])

키워드가 하나도 없는 빈 리스트 [] 라면 바라보는 state가 없기 때문에 한번만 가동한다.


수강생 노트1)
useEffect 글자를 타이핑할 때마다 API를 새로 호출하지 않고 한번만 호출해준다.

search keyword에 변화가 있을 때 만! marvel영화를 검색하고 싶을 때
즉, 특정한 코드만 변화했을 때 원하는 코드들을 실행할 수 있는 방법
-> useEffect(() => {
console.log("SEARCH FOR", keyword);
}, []);
이렇게 실행하면 1번만 됨
그리고 []자리에 keyword 써줌
-> keyword가 변화할 때 코드를 실행할 거라고 react.js에게 알려주는 것.
이것이 바로 빈 array를 써주었을 때 코드가 단 한번만 실행되는 이유임
react가 지켜볼 게 아무것도 없으니 처음 한번만 실행되는 것

useEffect(() => {
console.log("I run when 'keyword & counter' changes.")
}, [keyword, counter]);
-> 2개도 가능

수강생노트 2)
🔥 새롭게 배운 내용 정리 ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆

• 리액트를 사용하는 이유: 최소 단위의 렌더링을 위해
• useState(): 변수, 변수를 제어하는 함수로 구성되며 변하는 값을 제어, 해당 부분의 리렌더링을 위함
• props: 태그의 속성 값을 함수의 아규먼트 처럼 컴포넌트에 값을 전달해준다.
• useEffect(): 코드의 실행 시점을 관리할 수 있는 선택권을 얻는 방어막 같은 존재, 디펜던시가 없을 경우 최초 1회 실행, 있을 경우 해당 값이 변할 경우 실행한다. 이 때 디펜던시는 여러개 입력이 가능하다.

🏴 부모 컴포넌트에서 리렌더링이 일어날 경우 모든 자식들이 리렌더링이 된다.(wa can use memo)
🏴 propType을 설치하고 props의 타입을 지정해 줄 수 있다. 이 때 isRequired로 필수값을 지정 가능

* 잘못된 정보가 있다면 지적 부탁드립니다.
