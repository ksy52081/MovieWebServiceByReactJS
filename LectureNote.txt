#2.1 vanillaJs 와 ReactJS의 차이를 비교해보자

VanillaJS에서는
STEP1 HTML만든다
STEP2html element 찾아 js에 가져오기
STEP3 : event 감지하기
STEP4 JS 변수 데이터 업데이트
STEP5 HTML에 변경점 업데이트
과정을 거친다
단순하면 당연히 문제 없겠지만,
점점 복잡해질수록 handle 지옥에서 벗어나기 힘들다.


ReactJS를 수행하기 위해서는
가장 먼저 React와 React-DOM 라이브러리르 가져와야 한다.

<!DOCTYPE html>
<html>
    <body></body>
    <script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"> </script>
    <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"> </script>
</html>

아래와 같은 방법으로 리액트를 불러온다.
console에서 React를 찍었을 때 출력이 되면 무사히 완성한 것임.

ReactJS의 규칙 중 하나는 HTML을 HTML 페이지에 직접 작성하지 않는다는 점이다.
모두다 js 파일에 react JS로 쓴다.

이번에는 reacjs로 element를 생성하는 매우 귀찮고 복잡한 방법을 시현한다.
어려운 방식을 살펴보면서 ReactJS의 본질을 이해할 수 있다.

React.createElement("",{}, )
1번째 변수 element name(div, span, button 등등...), 
2번째 변수 property(classname id ....),
3번째 변수 안에 들어갈 내용

ReactJS는 application이 아주 interactive하도록 만들어주는 library이고,
ReactJSDOM은  모든 React element들을 html body에 둘 수 있도록 해준다.

요컨데 핵심은
vanilla에서는 HTML을 만들고 -> JS에 가져와서 -> HTML을 수정하는 방식이었지만
ReactJS에서는 모든것이 JS로 시작한 후 html이 되는것 (생성, 수정, 업데이트 등등) 
생성, 수정, 렌더링도 모두 ReactJS에서 이루어지기에 
업데이트 해야하는 HTML을 업데이트 하도록 JS 쪽에서 컨트롤 할 수 있다는 점이 중요

#2.3


React.createElement("",{}, )의 두번째 변수에
classname id와 같은 property가 들어가기도 하지만
eventlistener도 들어갈 수 있다!! onClick: () => {} 함수로.

vanilla JS에서는
    <button id="btn"> Click me</button> <!--STEP1 HTML만든다-->
    const button = document.querySelector("#btn"); //STEP2html element 찾아 js에 가져오기
    function handleClick(){span.innerText = `Total Clicks : ${counter}`; }
    button.addEventListener("click",handleClick)
이렇게 네줄이 필요하던 것이

ReactJS에서는
const btn = React.createElement("button", {onclick: () => console.log("i am clicked")}, "Click Me!");
이 한줄로 해결이 된다!

#2.5 
JSX 
JSX는 JavaScript를 확장한 문법이다
기본적으로 우리가 한 것처럼 React 요소를 만들 수 있게 해주는데
HTML에서 사용하는 문법과 흡사한 문법을 사용해서  

Babel 은 쉬운버전 JSX를 컴퓨터가 이해할 수 있도록 JS(하드모드)로 번역시켜주는 라이브러리

결국 JSX 문법은 사람이 더 쉽게 작성하기 위해 쓰이는 거지
결국 JSX 로 작성한 코드는 babel을 통해 다시 JS 문법 ~ Reactjs 하드모드 문법으로 번역한 다음
ReactJS / ReactJSDOM 으로 렌더링 하는거다.

JSX – 자바스크립트를 확장한 문법
보통의 HTML과 비슷. 그러나 property를 HTML 태그의 속성처럼 적으면 됨
const Title = (
console.log("mouse enter")}>
Hello I'm a span
);
style={{ backgroundColor: "tomato" }} -> 스타일은 {} 2개임
JSX를 브라우저가 온전히 이해하지 못하므로 이해할 수 있게
https://unpkg.com/@babel/standalone/babel.min.js 를 설치해야함
-> JSX로 적은 코드를 브라우저가 이해할 수 있는 형태로 바꿔줌
바벨을 가져온 뒤 script type="text/babel"로 적어줘야 인식함



#2.6 
액션까지 낭낭하게 넣어둔 element를 rendering 하기 위해서 
 ReactJS 하드모드에서는 
 const container = React.createElement("div", null, [h3, btn]);
 를 썼다.

 const container = <div> h3 btn </div>
 그냥 이렇게만 하면 "h3 btn" 이라는 글자만 출력될 뿐이다.

 그냥 텍스트가 아니라 요인을 집어넣고 싶으면
 요인이 그냥 Object가 아닌
    const h3 = (
      <h3 id="h3" onMouseEnter={() => console.log("mouse Entered")}>
        Hello, i am a h3
      </h3>
    );

함수형으로 정의해야 한다.
arrowfunction으로 아래처럼 하던가
    const h3 = () => (
      <h3 id="h3" onMouseEnter={() => console.log("mouse Entered")}>
        Hello, i am a h3
      </h3>
    );

그냥 일반 함수 정의로 아래처럼 해야한다.
    function h3() {
            return(
        <h3 id="h3" onMouseEnter={() => console.log("mouse Entered")}>
            Hello, i am a h3
        </h3>
        );
    }

element들을 함수화 했다면, 
 const container = <div> H3 Btn </div>
 를
 const Contianer = <div> <H3 /> <Btn /> </div>
로 작성한다.

※ 주의점 
JSX에서 함수형으로 정의된 element는 첫글자 대문자로 정의내려라
그렇지 않으면, <Button /> 이 아닌 <button /> 로 작성하면
우리가 정의내린 element인지, 아니면 html 기본 element를 가져다 쓴건지 구별을 못한다.

